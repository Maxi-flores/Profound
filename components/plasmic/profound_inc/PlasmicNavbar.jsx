/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ddT7wfnzx79n44ty2Sa9LN
// Component: 9xYtXO7cVVe8
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicLink as PlasmicLink__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Logo from "../../Logo"; // plasmic-import: 5znD7LWCezdD/component
import Button from "../../Button"; // plasmic-import: tcbz7UgrrC9_/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: ddT7wfnzx79n44ty2Sa9LN/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: ddT7wfnzx79n44ty2Sa9LN/styleTokensProvider
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: ddT7wfnzx79n44ty2Sa9LN/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: 9xYtXO7cVVe8/css

createPlasmicElementProxy;

export const PlasmicNavbar__VariantProps = new Array();

export const PlasmicNavbar__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavbar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__xP17K)}>
        <Logo
          data-plasmic-name={"logo"}
          data-plasmic-override={overrides.logo}
          className={classNames("__wab_instance", sty.logo)}
          smallLogo={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? undefined
              : undefined
          }
        />

        <div className={classNames(projectcss.all, sty.freeBox__zbAj8)}>
          <PlasmicLink__
            className={classNames(projectcss.all, projectcss.a, sty.link__sh0G)}
            component={Link}
            href={"#"}
            platform={"nextjs"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__i18Ht
              )}
            >
              {"Product"}
            </div>
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__byy4L
            )}
            component={Link}
            href={"#"}
            platform={"nextjs"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__x1E4
              )}
            >
              {"Purchase"}
            </div>
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(projectcss.all, projectcss.a, sty.link__hxuE)}
            component={Link}
            href={"#"}
            platform={"nextjs"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gYn3
              )}
            >
              {"How it Work"}
            </div>
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__g3EeA
            )}
            component={Link}
            href={"#"}
            platform={"nextjs"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yv3Sf
              )}
            >
              {"About us"}
            </div>
          </PlasmicLink__>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__h878H)}>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__jp3Pn
            )}
            component={Link}
            href={"#"}
            platform={"nextjs"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qfThO
              )}
            >
              {"Log in"}
            </div>
          </PlasmicLink__>
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__n8DV2
                )}
              >
                {"Sign Up"}
              </div>
            }
            size={"large"}
          />
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "logo", "button"],
  logo: ["logo"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
